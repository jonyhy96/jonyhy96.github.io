<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1.14 on Jony&#39;s blog</title>
    <link>https://jonyhy96.github.io/tags/1.14/</link>
    <description>Recent content in 1.14 on Jony&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 26 Feb 2020 15:37:34 +0800</lastBuildDate>
    
	<atom:link href="https://jonyhy96.github.io/tags/1.14/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 1.14 permits embedding of interfaces with overlapping method</title>
      <link>https://jonyhy96.github.io/2020/go-1.14-permits-embedding-of-interfaces-with-overlapping-method/</link>
      <pubDate>Wed, 26 Feb 2020 15:37:34 +0800</pubDate>
      
      <guid>https://jonyhy96.github.io/2020/go-1.14-permits-embedding-of-interfaces-with-overlapping-method/</guid>
      <description>在新发布的 Go 1.14 release 1 中我们可一看到go team对代码进行了一系列的优化，其中发生了Change to the language的更新。在本文中作者将对这一更新进行尝试和探讨。
我们知道Go是不支持继承只支持组合的，在结构体中发生同名字段组合的时候，结构体本身字段的优先级是高于被组合结构体的，可以通过以下代码进行证明。
package main import &amp;#34;fmt&amp;#34; // Animal animal. type Animal struct { Name string } // Cat cat. type Cat struct { Animal Name string } func main() { var a = Animal{Name: &amp;#34;animal&amp;#34;} var c = Cat{Animal: a, Name: &amp;#34;cat&amp;#34;} fmt.Println(c.Name) } // Output: // cat 而对于接口(interface)，如果在组合的过程中出现函数签名重复的情况则在使用时会发生ambiguous selector，可以通过以下代码证明。
package main import &amp;#34;fmt&amp;#34; // Animal Animal. type Animal interface { Name() string Age() int } // Dog Dog.</description>
    </item>
    
  </channel>
</rss>